# Generated by Django 3.0.3 on 2022-05-28 12:51

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_patient', models.BooleanField(default=False)),
                ('is_doctor', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('qid', models.AutoField(primary_key=True, serialize=False)),
                ('cat', models.TextField()),
                ('question', models.TextField()),
                ('options', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=20), default=list, size=None)),
                ('is_multiple_choice', models.IntegerField()),
                ('is_paragraph', models.IntegerField()),
                ('is_slider', models.IntegerField()),
            ],
            options={
                'db_table': 'questions',
            },
        ),
        migrations.CreateModel(
            name='Quote',
            fields=[
                ('qid', models.AutoField(primary_key=True, serialize=False)),
                ('text', models.TextField()),
                ('q_class', models.CharField(choices=[('Depression', 'Depression'), ('Anxiety', 'Anxiety'), ('Family issues', 'Family issues')], max_length=20)),
            ],
            options={
                'db_table': 'quotes',
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField()),
                ('link_id', models.TextField()),
                ('date', models.DateTimeField()),
                ('progress', models.FloatField()),
                ('depression', models.FloatField(default=0)),
                ('anxiety', models.FloatField(default=0)),
                ('family_issues', models.FloatField(default=0)),
                ('activities', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=20), default=list, size=None)),
            ],
            options={
                'db_table': 'reports',
            },
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('title', models.CharField(choices=[('Chartered Psychologist', 'Chartered Psychologist'), ('Clinical Psychologist', 'Clinical Psychologist'), ('Counselling Psychologist', 'Counselling Psychologist'), ('Counselors/Psychotherapeutic Counsellor/ Psychotherapist', 'Counselors/Psychotherapeutic Counsellor/ Psychotherapist'), ('Psychiatrist', 'Psychiatrist'), ('Psychoanalyst', 'Psychoanalyst'), ('Psychologist', 'Psychologist')], default='Counselors/Psychotherapeutic Counsellor/ Psychotherapist', max_length=100)),
                ('p_list', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, size=None)),
            ],
            options={
                'db_table': 'doctors',
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('plink', models.CharField(max_length=100)),
                ('pclass', models.CharField(choices=[('Depression', 'Depression'), ('Anxiety', 'Anxiety'), ('Family issues', 'Family issues')], max_length=20)),
                ('pdoctor', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'patients',
            },
        ),
    ]
